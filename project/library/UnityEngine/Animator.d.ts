declare namespace UnityEngine
{
	export namespace Animator
	{
		export function StringToHash(name: string): number;
	}
	export class Animator extends UnityEngine.Behaviour
	{
		public constructor();
		public ApplyBuiltinRootMotion(): void;
		public CrossFade(stateName: string, normalizedTransitionDuration: number): void;
		public CrossFade(stateHashName: number, normalizedTransitionDuration: number): void;
		public CrossFade(stateName: string, normalizedTransitionDuration: number, layer: number): void;
		public CrossFade(stateHashName: number, normalizedTransitionDuration: number, layer: number): void;
		public CrossFade(stateName: string, normalizedTransitionDuration: number, layer: number, normalizedTimeOffset: number): void;
		public CrossFade(stateHashName: number, normalizedTransitionDuration: number, layer: number, normalizedTimeOffset: number): void;
		public CrossFade(stateName: string, normalizedTransitionDuration: number, layer: number, normalizedTimeOffset: number, normalizedTransitionTime: number): void;
		public CrossFade(stateHashName: number, normalizedTransitionDuration: number, layer: number, normalizedTimeOffset: number, normalizedTransitionTime: number): void;
		public CrossFadeInFixedTime(stateName: string, fixedTransitionDuration: number): void;
		public CrossFadeInFixedTime(stateHashName: number, fixedTransitionDuration: number): void;
		public CrossFadeInFixedTime(stateName: string, fixedTransitionDuration: number, layer: number): void;
		public CrossFadeInFixedTime(stateHashName: number, fixedTransitionDuration: number, layer: number): void;
		public CrossFadeInFixedTime(stateName: string, fixedTransitionDuration: number, layer: number, fixedTimeOffset: number): void;
		public CrossFadeInFixedTime(stateHashName: number, fixedTransitionDuration: number, layer: number, fixedTimeOffset: number): void;
		public CrossFadeInFixedTime(stateName: string, fixedTransitionDuration: number, layer: number, fixedTimeOffset: number, normalizedTransitionTime: number): void;
		public CrossFadeInFixedTime(stateHashName: number, fixedTransitionDuration: number, layer: number, fixedTimeOffset: number, normalizedTransitionTime: number): void;
		public GetAnimatorTransitionInfo(layerIndex: number): UnityEngine.AnimatorTransitionInfo;
		public GetBehaviours(fullPathHash: number, layerIndex: number): UnityEngine.StateMachineBehaviour[];
		public GetBoneTransform(humanBoneId: UnityEngine.HumanBodyBones): UnityEngine.Transform;
		public GetBool(name: string): number;
		public GetBool(id: number): number;
		public GetCurrentAnimatorClipInfo(layerIndex: number): UnityEngine.AnimatorClipInfo[];
		public GetCurrentAnimatorClipInfoCount(layerIndex: number): number;
		public GetCurrentAnimatorStateInfo(layerIndex: number): UnityEngine.AnimatorStateInfo;
		public GetFloat(name: string): number;
		public GetFloat(id: number): number;
		public GetIKHintPosition(hint: UnityEngine.AvatarIKHint): UnityEngine.Vector3;
		public GetIKHintPositionWeight(hint: UnityEngine.AvatarIKHint): number;
		public GetIKPosition(goal: UnityEngine.AvatarIKGoal): UnityEngine.Vector3;
		public GetIKPositionWeight(goal: UnityEngine.AvatarIKGoal): number;
		public GetIKRotation(goal: UnityEngine.AvatarIKGoal): UnityEngine.Quaternion;
		public GetIKRotationWeight(goal: UnityEngine.AvatarIKGoal): number;
		public GetInteger(name: string): number;
		public GetInteger(id: number): number;
		public GetLayerIndex(layerName: string): number;
		public GetLayerName(layerIndex: number): string;
		public GetLayerWeight(layerIndex: number): number;
		public GetNextAnimatorClipInfo(layerIndex: number): UnityEngine.AnimatorClipInfo[];
		public GetNextAnimatorClipInfoCount(layerIndex: number): number;
		public GetNextAnimatorStateInfo(layerIndex: number): UnityEngine.AnimatorStateInfo;
		public GetParameter(index: number): UnityEngine.AnimatorControllerParameter;
		public HasState(layerIndex: number, stateID: number): number;
		public InterruptMatchTarget(): void;
		public InterruptMatchTarget(completeMatch: number): void;
		public IsInTransition(layerIndex: number): number;
		public IsParameterControlledByCurve(name: string): number;
		public IsParameterControlledByCurve(id: number): number;
		public MatchTarget(matchPosition: UnityEngine.Vector3, matchRotation: UnityEngine.Quaternion, targetBodyPart: UnityEngine.AvatarTarget, weightMask: UnityEngine.MatchTargetWeightMask, startNormalizedTime: number): void;
		public MatchTarget(matchPosition: UnityEngine.Vector3, matchRotation: UnityEngine.Quaternion, targetBodyPart: UnityEngine.AvatarTarget, weightMask: UnityEngine.MatchTargetWeightMask, startNormalizedTime: number, targetNormalizedTime: number): void;
		public Play(stateName: string): void;
		public Play(stateNameHash: number): void;
		public Play(stateName: string, layer: number): void;
		public Play(stateNameHash: number, layer: number): void;
		public Play(stateName: string, layer: number, normalizedTime: number): void;
		public Play(stateNameHash: number, layer: number, normalizedTime: number): void;
		public PlayInFixedTime(stateName: string): void;
		public PlayInFixedTime(stateNameHash: number): void;
		public PlayInFixedTime(stateName: string, layer: number): void;
		public PlayInFixedTime(stateNameHash: number, layer: number): void;
		public PlayInFixedTime(stateName: string, layer: number, fixedTime: number): void;
		public PlayInFixedTime(stateNameHash: number, layer: number, fixedTime: number): void;
		public Rebind(): void;
		public ResetTrigger(name: string): void;
		public ResetTrigger(id: number): void;
		public SetBoneLocalRotation(humanBoneId: UnityEngine.HumanBodyBones, rotation: UnityEngine.Quaternion): void;
		public SetBool(name: string, value: number): void;
		public SetBool(id: number, value: number): void;
		public SetFloat(name: string, value: number): void;
		public SetFloat(id: number, value: number): void;
		public SetFloat(name: string, value: number, dampTime: number, deltaTime: number): void;
		public SetFloat(id: number, value: number, dampTime: number, deltaTime: number): void;
		public SetIKHintPosition(hint: UnityEngine.AvatarIKHint, hintPosition: UnityEngine.Vector3): void;
		public SetIKHintPositionWeight(hint: UnityEngine.AvatarIKHint, value: number): void;
		public SetIKPosition(goal: UnityEngine.AvatarIKGoal, goalPosition: UnityEngine.Vector3): void;
		public SetIKPositionWeight(goal: UnityEngine.AvatarIKGoal, value: number): void;
		public SetIKRotation(goal: UnityEngine.AvatarIKGoal, goalRotation: UnityEngine.Quaternion): void;
		public SetIKRotationWeight(goal: UnityEngine.AvatarIKGoal, value: number): void;
		public SetInteger(name: string, value: number): void;
		public SetInteger(id: number, value: number): void;
		public SetLayerWeight(layerIndex: number, weight: number): void;
		public SetLookAtPosition(lookAtPosition: UnityEngine.Vector3): void;
		public SetLookAtWeight(weight: number): void;
		public SetLookAtWeight(weight: number, bodyWeight: number): void;
		public SetLookAtWeight(weight: number, bodyWeight: number, headWeight: number): void;
		public SetLookAtWeight(weight: number, bodyWeight: number, headWeight: number, eyesWeight: number): void;
		public SetLookAtWeight(weight: number, bodyWeight: number, headWeight: number, eyesWeight: number, clampWeight: number): void;
		public SetTarget(targetIndex: UnityEngine.AvatarTarget, targetNormalizedTime: number): void;
		public SetTrigger(name: string): void;
		public SetTrigger(id: number): void;
		public StartPlayback(): void;
		public StartRecording(frameCount: number): void;
		public StopPlayback(): void;
		public StopRecording(): void;
		public Update(deltaTime: number): void;
		public WriteDefaultValues(): void;
		public get isOptimizable(): number;
		public get pivotPosition(): UnityEngine.Vector3;
		public get isMatchingTarget(): number;
		public get speed(): number;
		public set speed(): number;
		public get targetPosition(): UnityEngine.Vector3;
		public get targetRotation(): UnityEngine.Quaternion;
		public get cullingMode(): UnityEngine.AnimatorCullingMode;
		public set cullingMode(): UnityEngine.AnimatorCullingMode;
		public get playbackTime(): number;
		public set playbackTime(): number;
		public get recorderStartTime(): number;
		public set recorderStartTime(): number;
		public get pivotWeight(): number;
		public get recorderStopTime(): number;
		public set recorderStopTime(): number;
		public get runtimeAnimatorController(): UnityEngine.RuntimeAnimatorController;
		public set runtimeAnimatorController(): UnityEngine.RuntimeAnimatorController;
		public get hasBoundPlayables(): number;
		public get avatar(): UnityEngine.Avatar;
		public set avatar(): UnityEngine.Avatar;
		public get playableGraph(): UnityEngine.Playables.PlayableGraph;
		public get layersAffectMassCenter(): number;
		public set layersAffectMassCenter(): number;
		public get leftFeetBottomHeight(): number;
		public get rightFeetBottomHeight(): number;
		public get logWarnings(): number;
		public set logWarnings(): number;
		public get recorderMode(): UnityEngine.AnimatorRecorderMode;
		public get fireEvents(): number;
		public set fireEvents(): number;
		public get feetPivotActive(): number;
		public set feetPivotActive(): number;
		public get parameters(): UnityEngine.AnimatorControllerParameter[];
		public get isHuman(): number;
		public get hasRootMotion(): number;
		public get humanScale(): number;
		public get isInitialized(): number;
		public get deltaPosition(): UnityEngine.Vector3;
		public get deltaRotation(): UnityEngine.Quaternion;
		public get velocity(): UnityEngine.Vector3;
		public get angularVelocity(): UnityEngine.Vector3;
		public get parameterCount(): number;
		public get rootPosition(): UnityEngine.Vector3;
		public set rootPosition(): UnityEngine.Vector3;
		public get applyRootMotion(): number;
		public set applyRootMotion(): number;
		public get updateMode(): UnityEngine.AnimatorUpdateMode;
		public set updateMode(): UnityEngine.AnimatorUpdateMode;
		public get hasTransformHierarchy(): number;
		public get gravityWeight(): number;
		public get bodyPosition(): UnityEngine.Vector3;
		public set bodyPosition(): UnityEngine.Vector3;
		public get bodyRotation(): UnityEngine.Quaternion;
		public set bodyRotation(): UnityEngine.Quaternion;
		public get stabilizeFeet(): number;
		public set stabilizeFeet(): number;
		public get layerCount(): number;
		public get rootRotation(): UnityEngine.Quaternion;
		public set rootRotation(): UnityEngine.Quaternion;
		public get keepAnimatorControllerStateOnDisable(): number;
		public set keepAnimatorControllerStateOnDisable(): number;
	}
}
