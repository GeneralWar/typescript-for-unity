declare namespace UnityEngine
{
	export class Mesh extends UnityEngine.Object
	{
		public constructor();
		public AddBlendShapeFrame(shapeName: string, frameWeight: number, deltaVertices: UnityEngine.Vector3[], deltaNormals: UnityEngine.Vector3[], deltaTangents: UnityEngine.Vector3[]): void;
		public Clear(): void;
		public Clear(keepVertexLayout: number): void;
		public ClearBlendShapes(): void;
		public CombineMeshes(combine: UnityEngine.CombineInstance[]): void;
		public CombineMeshes(combine: UnityEngine.CombineInstance[], mergeSubMeshes: number): void;
		public CombineMeshes(combine: UnityEngine.CombineInstance[], mergeSubMeshes: number, useMatrices: number): void;
		public CombineMeshes(combine: UnityEngine.CombineInstance[], mergeSubMeshes: number, useMatrices: number, hasLightmapData: number): void;
		public GetBaseVertex(submesh: number): number;
		public GetBlendShapeFrameCount(shapeIndex: number): number;
		public GetBlendShapeFrameVertices(shapeIndex: number, frameIndex: number, deltaVertices: UnityEngine.Vector3[], deltaNormals: UnityEngine.Vector3[], deltaTangents: UnityEngine.Vector3[]): void;
		public GetBlendShapeFrameWeight(shapeIndex: number, frameIndex: number): number;
		public GetBlendShapeIndex(blendShapeName: string): number;
		public GetBlendShapeName(shapeIndex: number): string;
		public GetIndexCount(submesh: number): number;
		public GetIndexStart(submesh: number): number;
		public GetIndices(submesh: number): number[];
		public GetIndices(submesh: number, applyBaseVertex: number): number[];
		public GetNativeIndexBufferPtr(): number;
		public GetNativeVertexBufferPtr(index: number): number;
		public GetTopology(submesh: number): UnityEngine.MeshTopology;
		public GetTriangles(submesh: number): number[];
		public GetTriangles(submesh: number, applyBaseVertex: number): number[];
		public GetUVDistributionMetric(uvSetIndex: number): number;
		public MarkDynamic(): void;
		public RecalculateBounds(): void;
		public RecalculateNormals(): void;
		public RecalculateTangents(): void;
		public SetIndices(indices: number[], topology: UnityEngine.MeshTopology, submesh: number): void;
		public SetIndices(indices: number[], topology: UnityEngine.MeshTopology, submesh: number, calculateBounds: number): void;
		public SetIndices(indices: number[], topology: UnityEngine.MeshTopology, submesh: number, calculateBounds: number, baseVertex: number): void;
		public SetTriangles(triangles: number[], submesh: number): void;
		public SetTriangles(triangles: number[], submesh: number, calculateBounds: number): void;
		public SetTriangles(triangles: number[], submesh: number, calculateBounds: number, baseVertex: number): void;
		public UploadMeshData(markNoLongerReadable: number): void;
		public get indexFormat(): UnityEngine.Rendering.IndexFormat;
		public set indexFormat(): UnityEngine.Rendering.IndexFormat;
		public get colors(): UnityEngine.Color[];
		public set colors(): UnityEngine.Color[];
		public get uv8(): UnityEngine.Vector2[];
		public set uv8(): UnityEngine.Vector2[];
		public get uv7(): UnityEngine.Vector2[];
		public set uv7(): UnityEngine.Vector2[];
		public get uv6(): UnityEngine.Vector2[];
		public set uv6(): UnityEngine.Vector2[];
		public get uv5(): UnityEngine.Vector2[];
		public set uv5(): UnityEngine.Vector2[];
		public get uv4(): UnityEngine.Vector2[];
		public set uv4(): UnityEngine.Vector2[];
		public get uv3(): UnityEngine.Vector2[];
		public set uv3(): UnityEngine.Vector2[];
		public get uv2(): UnityEngine.Vector2[];
		public set uv2(): UnityEngine.Vector2[];
		public get uv(): UnityEngine.Vector2[];
		public set uv(): UnityEngine.Vector2[];
		public get colors32(): UnityEngine.Color32[];
		public set colors32(): UnityEngine.Color32[];
		public get tangents(): UnityEngine.Vector4[];
		public set tangents(): UnityEngine.Vector4[];
		public get vertices(): UnityEngine.Vector3[];
		public set vertices(): UnityEngine.Vector3[];
		public get bounds(): UnityEngine.Bounds;
		public set bounds(): UnityEngine.Bounds;
		public get subMeshCount(): number;
		public set subMeshCount(): number;
		public get vertexCount(): number;
		public get isReadable(): number;
		public get bindposes(): UnityEngine.Matrix4x4[];
		public set bindposes(): UnityEngine.Matrix4x4[];
		public get boneWeights(): UnityEngine.BoneWeight[];
		public set boneWeights(): UnityEngine.BoneWeight[];
		public get blendShapeCount(): number;
		public get vertexBufferCount(): number;
		public get normals(): UnityEngine.Vector3[];
		public set normals(): UnityEngine.Vector3[];
		public get triangles(): number[];
		public set triangles(): number[];
	}
}
