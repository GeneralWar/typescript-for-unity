declare namespace UnityEngine
{
	export class Transform extends UnityEngine.Component
	{
		public DetachChildren(): void;
		public Find(n: string): UnityEngine.Transform;
		public GetChild(index: number): UnityEngine.Transform;
		public GetEnumerator(): any;
		public GetSiblingIndex(): number;
		public InverseTransformDirection(direction: UnityEngine.Vector3): UnityEngine.Vector3;
		public InverseTransformDirection(x: number, y: number, z: number): UnityEngine.Vector3;
		public InverseTransformPoint(position: UnityEngine.Vector3): UnityEngine.Vector3;
		public InverseTransformPoint(x: number, y: number, z: number): UnityEngine.Vector3;
		public InverseTransformVector(vector: UnityEngine.Vector3): UnityEngine.Vector3;
		public InverseTransformVector(x: number, y: number, z: number): UnityEngine.Vector3;
		public IsChildOf(parent: UnityEngine.Transform): number;
		public LookAt(target: UnityEngine.Transform): void;
		public LookAt(worldPosition: UnityEngine.Vector3): void;
		public LookAt(target: UnityEngine.Transform, worldUp: UnityEngine.Vector3): void;
		public LookAt(worldPosition: UnityEngine.Vector3, worldUp: UnityEngine.Vector3): void;
		public Rotate(eulers: UnityEngine.Vector3): void;
		public Rotate(eulers: UnityEngine.Vector3, relativeTo: UnityEngine.Space): void;
		public Rotate(axis: UnityEngine.Vector3, angle: number): void;
		public Rotate(xAngle: number, yAngle: number, zAngle: number): void;
		public Rotate(axis: UnityEngine.Vector3, angle: number, relativeTo: UnityEngine.Space): void;
		public Rotate(xAngle: number, yAngle: number, zAngle: number, relativeTo: UnityEngine.Space): void;
		public RotateAround(point: UnityEngine.Vector3, axis: UnityEngine.Vector3, angle: number): void;
		public SetAsFirstSibling(): void;
		public SetAsLastSibling(): void;
		public SetParent(p: UnityEngine.Transform): void;
		public SetParent(parent: UnityEngine.Transform, worldPositionStays: number): void;
		public SetPositionAndRotation(position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion): void;
		public SetSiblingIndex(index: number): void;
		public TransformDirection(direction: UnityEngine.Vector3): UnityEngine.Vector3;
		public TransformDirection(x: number, y: number, z: number): UnityEngine.Vector3;
		public TransformPoint(position: UnityEngine.Vector3): UnityEngine.Vector3;
		public TransformPoint(x: number, y: number, z: number): UnityEngine.Vector3;
		public TransformVector(vector: UnityEngine.Vector3): UnityEngine.Vector3;
		public TransformVector(x: number, y: number, z: number): UnityEngine.Vector3;
		public Translate(translation: UnityEngine.Vector3): void;
		public Translate(translation: UnityEngine.Vector3, relativeTo: UnityEngine.Space): void;
		public Translate(translation: UnityEngine.Vector3, relativeTo: UnityEngine.Transform): void;
		public Translate(x: number, y: number, z: number): void;
		public Translate(x: number, y: number, z: number, relativeTo: UnityEngine.Space): void;
		public Translate(x: number, y: number, z: number, relativeTo: UnityEngine.Transform): void;
		public get position(): UnityEngine.Vector3;
		public set position(): UnityEngine.Vector3;
		public get hasChanged(): number;
		public set hasChanged(): number;
		public get lossyScale(): UnityEngine.Vector3;
		public get childCount(): number;
		public get root(): UnityEngine.Transform;
		public get localToWorldMatrix(): UnityEngine.Matrix4x4;
		public get worldToLocalMatrix(): UnityEngine.Matrix4x4;
		public get parent(): UnityEngine.Transform;
		public set parent(): UnityEngine.Transform;
		public get hierarchyCapacity(): number;
		public set hierarchyCapacity(): number;
		public get localScale(): UnityEngine.Vector3;
		public set localScale(): UnityEngine.Vector3;
		public get rotation(): UnityEngine.Quaternion;
		public set rotation(): UnityEngine.Quaternion;
		public get forward(): UnityEngine.Vector3;
		public set forward(): UnityEngine.Vector3;
		public get up(): UnityEngine.Vector3;
		public set up(): UnityEngine.Vector3;
		public get right(): UnityEngine.Vector3;
		public set right(): UnityEngine.Vector3;
		public get localEulerAngles(): UnityEngine.Vector3;
		public set localEulerAngles(): UnityEngine.Vector3;
		public get eulerAngles(): UnityEngine.Vector3;
		public set eulerAngles(): UnityEngine.Vector3;
		public get localPosition(): UnityEngine.Vector3;
		public set localPosition(): UnityEngine.Vector3;
		public get localRotation(): UnityEngine.Quaternion;
		public set localRotation(): UnityEngine.Quaternion;
		public get hierarchyCount(): number;
	}
}
