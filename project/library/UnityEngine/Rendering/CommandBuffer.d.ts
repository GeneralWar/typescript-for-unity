declare namespace UnityEngine
{
	declare namespace Rendering
	{
		export class CommandBuffer
		{
			public constructor();
			public BeginSample(name: string): void;
			public Blit(source: UnityEngine.Texture, dest: UnityEngine.Rendering.RenderTargetIdentifier): void;
			public Blit(source: UnityEngine.Rendering.RenderTargetIdentifier, dest: UnityEngine.Rendering.RenderTargetIdentifier): void;
			public Blit(source: UnityEngine.Texture, dest: UnityEngine.Rendering.RenderTargetIdentifier, mat: UnityEngine.Material): void;
			public Blit(source: UnityEngine.Rendering.RenderTargetIdentifier, dest: UnityEngine.Rendering.RenderTargetIdentifier, mat: UnityEngine.Material): void;
			public Blit(source: UnityEngine.Texture, dest: UnityEngine.Rendering.RenderTargetIdentifier, scale: UnityEngine.Vector2, offset: UnityEngine.Vector2): void;
			public Blit(source: UnityEngine.Texture, dest: UnityEngine.Rendering.RenderTargetIdentifier, mat: UnityEngine.Material, pass: number): void;
			public Blit(source: UnityEngine.Rendering.RenderTargetIdentifier, dest: UnityEngine.Rendering.RenderTargetIdentifier, scale: UnityEngine.Vector2, offset: UnityEngine.Vector2): void;
			public Blit(source: UnityEngine.Rendering.RenderTargetIdentifier, dest: UnityEngine.Rendering.RenderTargetIdentifier, mat: UnityEngine.Material, pass: number): void;
			public Clear(): void;
			public ClearRandomWriteTargets(): void;
			public ClearRenderTarget(clearDepth: boolean, clearColor: boolean, backgroundColor: UnityEngine.Color): void;
			public ClearRenderTarget(clearDepth: boolean, clearColor: boolean, backgroundColor: UnityEngine.Color, depth: number): void;
			public ConvertTexture(src: UnityEngine.Rendering.RenderTargetIdentifier, dst: UnityEngine.Rendering.RenderTargetIdentifier): void;
			public ConvertTexture(src: UnityEngine.Rendering.RenderTargetIdentifier, srcElement: number, dst: UnityEngine.Rendering.RenderTargetIdentifier, dstElement: number): void;
			public CopyCounterValue(src: UnityEngine.ComputeBuffer, dst: UnityEngine.ComputeBuffer, dstOffsetBytes: number): void;
			public CopyTexture(src: UnityEngine.Rendering.RenderTargetIdentifier, dst: UnityEngine.Rendering.RenderTargetIdentifier): void;
			public CopyTexture(src: UnityEngine.Rendering.RenderTargetIdentifier, srcElement: number, dst: UnityEngine.Rendering.RenderTargetIdentifier, dstElement: number): void;
			public CopyTexture(src: UnityEngine.Rendering.RenderTargetIdentifier, srcElement: number, srcMip: number, dst: UnityEngine.Rendering.RenderTargetIdentifier, dstElement: number, dstMip: number): void;
			public CopyTexture(src: UnityEngine.Rendering.RenderTargetIdentifier, srcElement: number, srcMip: number, srcX: number, srcY: number, srcWidth: number, srcHeight: number, dst: UnityEngine.Rendering.RenderTargetIdentifier, dstElement: number, dstMip: number, dstX: number, dstY: number): void;
			public CreateGPUFence(): UnityEngine.Rendering.GPUFence;
			public CreateGPUFence(stage: UnityEngine.Rendering.SynchronisationStage): UnityEngine.Rendering.GPUFence;
			public DisableScissorRect(): void;
			public DisableShaderKeyword(keyword: string): void;
			public DispatchCompute(computeShader: UnityEngine.ComputeShader, kernelIndex: number, indirectBuffer: UnityEngine.ComputeBuffer, argsOffset: number): void;
			public DispatchCompute(computeShader: UnityEngine.ComputeShader, kernelIndex: number, threadGroupsX: number, threadGroupsY: number, threadGroupsZ: number): void;
			public Dispose(): void;
			public DrawMesh(mesh: UnityEngine.Mesh, matrix: UnityEngine.Matrix4x4, material: UnityEngine.Material): void;
			public DrawMesh(mesh: UnityEngine.Mesh, matrix: UnityEngine.Matrix4x4, material: UnityEngine.Material, submeshIndex: number): void;
			public DrawMesh(mesh: UnityEngine.Mesh, matrix: UnityEngine.Matrix4x4, material: UnityEngine.Material, submeshIndex: number, shaderPass: number): void;
			public DrawMesh(mesh: UnityEngine.Mesh, matrix: UnityEngine.Matrix4x4, material: UnityEngine.Material, submeshIndex: number, shaderPass: number, properties: UnityEngine.MaterialPropertyBlock): void;
			public DrawMeshInstanced(mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, shaderPass: number, matrices: UnityEngine.Matrix4x4[]): void;
			public DrawMeshInstanced(mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, shaderPass: number, matrices: UnityEngine.Matrix4x4[], count: number): void;
			public DrawMeshInstanced(mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, shaderPass: number, matrices: UnityEngine.Matrix4x4[], count: number, properties: UnityEngine.MaterialPropertyBlock): void;
			public DrawMeshInstancedIndirect(mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, shaderPass: number, bufferWithArgs: UnityEngine.ComputeBuffer): void;
			public DrawMeshInstancedIndirect(mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, shaderPass: number, bufferWithArgs: UnityEngine.ComputeBuffer, argsOffset: number): void;
			public DrawMeshInstancedIndirect(mesh: UnityEngine.Mesh, submeshIndex: number, material: UnityEngine.Material, shaderPass: number, bufferWithArgs: UnityEngine.ComputeBuffer, argsOffset: number, properties: UnityEngine.MaterialPropertyBlock): void;
			public DrawProcedural(matrix: UnityEngine.Matrix4x4, material: UnityEngine.Material, shaderPass: number, topology: UnityEngine.MeshTopology, vertexCount: number): void;
			public DrawProcedural(matrix: UnityEngine.Matrix4x4, material: UnityEngine.Material, shaderPass: number, topology: UnityEngine.MeshTopology, vertexCount: number, instanceCount: number): void;
			public DrawProcedural(matrix: UnityEngine.Matrix4x4, material: UnityEngine.Material, shaderPass: number, topology: UnityEngine.MeshTopology, vertexCount: number, instanceCount: number, properties: UnityEngine.MaterialPropertyBlock): void;
			public DrawProceduralIndirect(matrix: UnityEngine.Matrix4x4, material: UnityEngine.Material, shaderPass: number, topology: UnityEngine.MeshTopology, bufferWithArgs: UnityEngine.ComputeBuffer): void;
			public DrawProceduralIndirect(matrix: UnityEngine.Matrix4x4, material: UnityEngine.Material, shaderPass: number, topology: UnityEngine.MeshTopology, bufferWithArgs: UnityEngine.ComputeBuffer, argsOffset: number): void;
			public DrawProceduralIndirect(matrix: UnityEngine.Matrix4x4, material: UnityEngine.Material, shaderPass: number, topology: UnityEngine.MeshTopology, bufferWithArgs: UnityEngine.ComputeBuffer, argsOffset: number, properties: UnityEngine.MaterialPropertyBlock): void;
			public DrawRenderer(renderer: UnityEngine.Renderer, material: UnityEngine.Material): void;
			public DrawRenderer(renderer: UnityEngine.Renderer, material: UnityEngine.Material, submeshIndex: number): void;
			public DrawRenderer(renderer: UnityEngine.Renderer, material: UnityEngine.Material, submeshIndex: number, shaderPass: number): void;
			public EnableScissorRect(scissor: UnityEngine.Rect): void;
			public EnableShaderKeyword(keyword: string): void;
			public EndSample(name: string): void;
			public GenerateMips(rt: UnityEngine.RenderTexture): void;
			public GetTemporaryRT(nameID: number, desc: UnityEngine.RenderTextureDescriptor): void;
			public GetTemporaryRT(nameID: number, width: number, height: number): void;
			public GetTemporaryRT(nameID: number, desc: UnityEngine.RenderTextureDescriptor, filter: UnityEngine.FilterMode): void;
			public GetTemporaryRT(nameID: number, width: number, height: number, depthBuffer: number): void;
			public GetTemporaryRT(nameID: number, width: number, height: number, depthBuffer: number, filter: UnityEngine.FilterMode): void;
			public GetTemporaryRT(nameID: number, width: number, height: number, depthBuffer: number, filter: UnityEngine.FilterMode, format: UnityEngine.RenderTextureFormat): void;
			public GetTemporaryRT(nameID: number, width: number, height: number, depthBuffer: number, filter: UnityEngine.FilterMode, format: UnityEngine.RenderTextureFormat, readWrite: UnityEngine.RenderTextureReadWrite): void;
			public GetTemporaryRT(nameID: number, width: number, height: number, depthBuffer: number, filter: UnityEngine.FilterMode, format: UnityEngine.RenderTextureFormat, readWrite: UnityEngine.RenderTextureReadWrite, antiAliasing: number): void;
			public GetTemporaryRT(nameID: number, width: number, height: number, depthBuffer: number, filter: UnityEngine.FilterMode, format: UnityEngine.RenderTextureFormat, readWrite: UnityEngine.RenderTextureReadWrite, antiAliasing: number, enableRandomWrite: boolean): void;
			public GetTemporaryRT(nameID: number, width: number, height: number, depthBuffer: number, filter: UnityEngine.FilterMode, format: UnityEngine.RenderTextureFormat, readWrite: UnityEngine.RenderTextureReadWrite, antiAliasing: number, enableRandomWrite: boolean, memorylessMode: UnityEngine.RenderTextureMemoryless): void;
			public GetTemporaryRT(nameID: number, width: number, height: number, depthBuffer: number, filter: UnityEngine.FilterMode, format: UnityEngine.RenderTextureFormat, readWrite: UnityEngine.RenderTextureReadWrite, antiAliasing: number, enableRandomWrite: boolean, memorylessMode: UnityEngine.RenderTextureMemoryless, useDynamicScale: boolean): void;
			public GetTemporaryRTArray(nameID: number, width: number, height: number, slices: number): void;
			public GetTemporaryRTArray(nameID: number, width: number, height: number, slices: number, depthBuffer: number): void;
			public GetTemporaryRTArray(nameID: number, width: number, height: number, slices: number, depthBuffer: number, filter: UnityEngine.FilterMode): void;
			public GetTemporaryRTArray(nameID: number, width: number, height: number, slices: number, depthBuffer: number, filter: UnityEngine.FilterMode, format: UnityEngine.RenderTextureFormat): void;
			public GetTemporaryRTArray(nameID: number, width: number, height: number, slices: number, depthBuffer: number, filter: UnityEngine.FilterMode, format: UnityEngine.RenderTextureFormat, readWrite: UnityEngine.RenderTextureReadWrite): void;
			public GetTemporaryRTArray(nameID: number, width: number, height: number, slices: number, depthBuffer: number, filter: UnityEngine.FilterMode, format: UnityEngine.RenderTextureFormat, readWrite: UnityEngine.RenderTextureReadWrite, antiAliasing: number): void;
			public GetTemporaryRTArray(nameID: number, width: number, height: number, slices: number, depthBuffer: number, filter: UnityEngine.FilterMode, format: UnityEngine.RenderTextureFormat, readWrite: UnityEngine.RenderTextureReadWrite, antiAliasing: number, enableRandomWrite: boolean): void;
			public GetTemporaryRTArray(nameID: number, width: number, height: number, slices: number, depthBuffer: number, filter: UnityEngine.FilterMode, format: UnityEngine.RenderTextureFormat, readWrite: UnityEngine.RenderTextureReadWrite, antiAliasing: number, enableRandomWrite: boolean, useDynamicScale: boolean): void;
			public IssuePluginCustomBlit(callback: number, command: number, source: UnityEngine.Rendering.RenderTargetIdentifier, dest: UnityEngine.Rendering.RenderTargetIdentifier, commandParam: number, commandFlags: number): void;
			public IssuePluginCustomTextureUpdateV2(callback: number, targetTexture: UnityEngine.Texture, userData: number): void;
			public IssuePluginEvent(callback: number, eventID: number): void;
			public IssuePluginEventAndData(callback: number, eventID: number, data: number): void;
			public Release(): void;
			public ReleaseTemporaryRT(nameID: number): void;
			public ResolveAntiAliasedSurface(rt: UnityEngine.RenderTexture, target: UnityEngine.RenderTexture): void;
			public SetComputeBufferParam(computeShader: UnityEngine.ComputeShader, kernelIndex: number, nameID: number, buffer: UnityEngine.ComputeBuffer): void;
			public SetComputeBufferParam(computeShader: UnityEngine.ComputeShader, kernelIndex: number, name: string, buffer: UnityEngine.ComputeBuffer): void;
			public SetComputeFloatParam(computeShader: UnityEngine.ComputeShader, nameID: number, val: number): void;
			public SetComputeFloatParam(computeShader: UnityEngine.ComputeShader, name: string, val: number): void;
			public SetComputeFloatParams(computeShader: UnityEngine.ComputeShader, name: string, values: number[]): void;
			public SetComputeFloatParams(computeShader: UnityEngine.ComputeShader, nameID: number, values: number[]): void;
			public SetComputeIntParam(computeShader: UnityEngine.ComputeShader, nameID: number, val: number): void;
			public SetComputeIntParam(computeShader: UnityEngine.ComputeShader, name: string, val: number): void;
			public SetComputeIntParams(computeShader: UnityEngine.ComputeShader, name: string, values: number[]): void;
			public SetComputeIntParams(computeShader: UnityEngine.ComputeShader, nameID: number, values: number[]): void;
			public SetComputeMatrixArrayParam(computeShader: UnityEngine.ComputeShader, nameID: number, values: UnityEngine.Matrix4x4[]): void;
			public SetComputeMatrixArrayParam(computeShader: UnityEngine.ComputeShader, name: string, values: UnityEngine.Matrix4x4[]): void;
			public SetComputeMatrixParam(computeShader: UnityEngine.ComputeShader, nameID: number, val: UnityEngine.Matrix4x4): void;
			public SetComputeMatrixParam(computeShader: UnityEngine.ComputeShader, name: string, val: UnityEngine.Matrix4x4): void;
			public SetComputeTextureParam(computeShader: UnityEngine.ComputeShader, kernelIndex: number, name: string, rt: UnityEngine.Rendering.RenderTargetIdentifier): void;
			public SetComputeTextureParam(computeShader: UnityEngine.ComputeShader, kernelIndex: number, nameID: number, rt: UnityEngine.Rendering.RenderTargetIdentifier): void;
			public SetComputeTextureParam(computeShader: UnityEngine.ComputeShader, kernelIndex: number, name: string, rt: UnityEngine.Rendering.RenderTargetIdentifier, mipLevel: number): void;
			public SetComputeTextureParam(computeShader: UnityEngine.ComputeShader, kernelIndex: number, nameID: number, rt: UnityEngine.Rendering.RenderTargetIdentifier, mipLevel: number): void;
			public SetComputeVectorArrayParam(computeShader: UnityEngine.ComputeShader, nameID: number, values: UnityEngine.Vector4[]): void;
			public SetComputeVectorArrayParam(computeShader: UnityEngine.ComputeShader, name: string, values: UnityEngine.Vector4[]): void;
			public SetComputeVectorParam(computeShader: UnityEngine.ComputeShader, nameID: number, val: UnityEngine.Vector4): void;
			public SetComputeVectorParam(computeShader: UnityEngine.ComputeShader, name: string, val: UnityEngine.Vector4): void;
			public SetGlobalBuffer(nameID: number, value: UnityEngine.ComputeBuffer): void;
			public SetGlobalBuffer(name: string, value: UnityEngine.ComputeBuffer): void;
			public SetGlobalColor(nameID: number, value: UnityEngine.Color): void;
			public SetGlobalColor(name: string, value: UnityEngine.Color): void;
			public SetGlobalDepthBias(bias: number, slopeBias: number): void;
			public SetGlobalFloat(nameID: number, value: number): void;
			public SetGlobalFloat(name: string, value: number): void;
			public SetGlobalFloatArray(nameID: number, values: number[]): void;
			public SetGlobalFloatArray(propertyName: string, values: number[]): void;
			public SetGlobalInt(nameID: number, value: number): void;
			public SetGlobalInt(name: string, value: number): void;
			public SetGlobalMatrix(nameID: number, value: UnityEngine.Matrix4x4): void;
			public SetGlobalMatrix(name: string, value: UnityEngine.Matrix4x4): void;
			public SetGlobalMatrixArray(nameID: number, values: UnityEngine.Matrix4x4[]): void;
			public SetGlobalMatrixArray(propertyName: string, values: UnityEngine.Matrix4x4[]): void;
			public SetGlobalTexture(name: string, value: UnityEngine.Rendering.RenderTargetIdentifier): void;
			public SetGlobalTexture(nameID: number, value: UnityEngine.Rendering.RenderTargetIdentifier): void;
			public SetGlobalVector(nameID: number, value: UnityEngine.Vector4): void;
			public SetGlobalVector(name: string, value: UnityEngine.Vector4): void;
			public SetGlobalVectorArray(nameID: number, values: UnityEngine.Vector4[]): void;
			public SetGlobalVectorArray(propertyName: string, values: UnityEngine.Vector4[]): void;
			public SetInvertCulling(invertCulling: boolean): void;
			public SetProjectionMatrix(proj: UnityEngine.Matrix4x4): void;
			public SetRandomWriteTarget(index: number, rt: UnityEngine.Rendering.RenderTargetIdentifier): void;
			public SetRandomWriteTarget(index: number, buffer: UnityEngine.ComputeBuffer): void;
			public SetRandomWriteTarget(index: number, buffer: UnityEngine.ComputeBuffer, preserveCounterValue: boolean): void;
			public SetRenderTarget(rt: UnityEngine.Rendering.RenderTargetIdentifier): void;
			public SetRenderTarget(binding: UnityEngine.Rendering.RenderTargetBinding): void;
			public SetRenderTarget(rt: UnityEngine.Rendering.RenderTargetIdentifier, mipLevel: number): void;
			public SetRenderTarget(color: UnityEngine.Rendering.RenderTargetIdentifier, depth: UnityEngine.Rendering.RenderTargetIdentifier): void;
			public SetRenderTarget(colors: UnityEngine.Rendering.RenderTargetIdentifier[], depth: UnityEngine.Rendering.RenderTargetIdentifier): void;
			public SetRenderTarget(rt: UnityEngine.Rendering.RenderTargetIdentifier, loadAction: UnityEngine.Rendering.RenderBufferLoadAction, storeAction: UnityEngine.Rendering.RenderBufferStoreAction): void;
			public SetRenderTarget(rt: UnityEngine.Rendering.RenderTargetIdentifier, mipLevel: number, cubemapFace: UnityEngine.CubemapFace): void;
			public SetRenderTarget(color: UnityEngine.Rendering.RenderTargetIdentifier, depth: UnityEngine.Rendering.RenderTargetIdentifier, mipLevel: number): void;
			public SetRenderTarget(rt: UnityEngine.Rendering.RenderTargetIdentifier, mipLevel: number, cubemapFace: UnityEngine.CubemapFace, depthSlice: number): void;
			public SetRenderTarget(color: UnityEngine.Rendering.RenderTargetIdentifier, depth: UnityEngine.Rendering.RenderTargetIdentifier, mipLevel: number, cubemapFace: UnityEngine.CubemapFace): void;
			public SetRenderTarget(rt: UnityEngine.Rendering.RenderTargetIdentifier, colorLoadAction: UnityEngine.Rendering.RenderBufferLoadAction, colorStoreAction: UnityEngine.Rendering.RenderBufferStoreAction, depthLoadAction: UnityEngine.Rendering.RenderBufferLoadAction, depthStoreAction: UnityEngine.Rendering.RenderBufferStoreAction): void;
			public SetRenderTarget(color: UnityEngine.Rendering.RenderTargetIdentifier, depth: UnityEngine.Rendering.RenderTargetIdentifier, mipLevel: number, cubemapFace: UnityEngine.CubemapFace, depthSlice: number): void;
			public SetRenderTarget(color: UnityEngine.Rendering.RenderTargetIdentifier, colorLoadAction: UnityEngine.Rendering.RenderBufferLoadAction, colorStoreAction: UnityEngine.Rendering.RenderBufferStoreAction, depth: UnityEngine.Rendering.RenderTargetIdentifier, depthLoadAction: UnityEngine.Rendering.RenderBufferLoadAction, depthStoreAction: UnityEngine.Rendering.RenderBufferStoreAction): void;
			public SetShadowSamplingMode(shadowmap: UnityEngine.Rendering.RenderTargetIdentifier, mode: UnityEngine.Rendering.ShadowSamplingMode): void;
			public SetViewMatrix(view: UnityEngine.Matrix4x4): void;
			public SetViewport(pixelRect: UnityEngine.Rect): void;
			public SetViewProjectionMatrices(view: UnityEngine.Matrix4x4, proj: UnityEngine.Matrix4x4): void;
			public WaitOnGPUFence(fence: UnityEngine.Rendering.GPUFence): void;
			public WaitOnGPUFence(fence: UnityEngine.Rendering.GPUFence, stage: UnityEngine.Rendering.SynchronisationStage): void;
			public get name(): string;
			public set name(): string;
			public get sizeInBytes(): number;
		}
	}
}
