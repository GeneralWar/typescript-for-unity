declare namespace UnityEngine
{
	export class Rigidbody extends UnityEngine.Component
	{
		public constructor();
		public AddExplosionForce(explosionForce: number, explosionPosition: UnityEngine.Vector3, explosionRadius: number): void;
		public AddExplosionForce(explosionForce: number, explosionPosition: UnityEngine.Vector3, explosionRadius: number, upwardsModifier: number): void;
		public AddExplosionForce(explosionForce: number, explosionPosition: UnityEngine.Vector3, explosionRadius: number, upwardsModifier: number, mode: UnityEngine.ForceMode): void;
		public AddForce(force: UnityEngine.Vector3): void;
		public AddForce(force: UnityEngine.Vector3, mode: UnityEngine.ForceMode): void;
		public AddForce(x: number, y: number, z: number): void;
		public AddForce(x: number, y: number, z: number, mode: UnityEngine.ForceMode): void;
		public AddForceAtPosition(force: UnityEngine.Vector3, position: UnityEngine.Vector3): void;
		public AddForceAtPosition(force: UnityEngine.Vector3, position: UnityEngine.Vector3, mode: UnityEngine.ForceMode): void;
		public AddRelativeForce(force: UnityEngine.Vector3): void;
		public AddRelativeForce(force: UnityEngine.Vector3, mode: UnityEngine.ForceMode): void;
		public AddRelativeForce(x: number, y: number, z: number): void;
		public AddRelativeForce(x: number, y: number, z: number, mode: UnityEngine.ForceMode): void;
		public AddRelativeTorque(torque: UnityEngine.Vector3): void;
		public AddRelativeTorque(torque: UnityEngine.Vector3, mode: UnityEngine.ForceMode): void;
		public AddRelativeTorque(x: number, y: number, z: number): void;
		public AddRelativeTorque(x: number, y: number, z: number, mode: UnityEngine.ForceMode): void;
		public AddTorque(torque: UnityEngine.Vector3): void;
		public AddTorque(torque: UnityEngine.Vector3, mode: UnityEngine.ForceMode): void;
		public AddTorque(x: number, y: number, z: number): void;
		public AddTorque(x: number, y: number, z: number, mode: UnityEngine.ForceMode): void;
		public ClosestPointOnBounds(position: UnityEngine.Vector3): UnityEngine.Vector3;
		public GetPointVelocity(worldPoint: UnityEngine.Vector3): UnityEngine.Vector3;
		public GetRelativePointVelocity(relativePoint: UnityEngine.Vector3): UnityEngine.Vector3;
		public IsSleeping(): boolean;
		public MovePosition(position: UnityEngine.Vector3): void;
		public MoveRotation(rot: UnityEngine.Quaternion): void;
		public ResetCenterOfMass(): void;
		public ResetInertiaTensor(): void;
		public SetDensity(density: number): void;
		public Sleep(): void;
		public SweepTestAll(direction: UnityEngine.Vector3): UnityEngine.RaycastHit[];
		public SweepTestAll(direction: UnityEngine.Vector3, maxDistance: number): UnityEngine.RaycastHit[];
		public SweepTestAll(direction: UnityEngine.Vector3, maxDistance: number, queryTriggerInteraction: UnityEngine.QueryTriggerInteraction): UnityEngine.RaycastHit[];
		public WakeUp(): void;
		public get velocity(): UnityEngine.Vector3;
		public set velocity(): UnityEngine.Vector3;
		public get sleepThreshold(): number;
		public set sleepThreshold(): number;
		public get solverIterations(): number;
		public set solverIterations(): number;
		public get interpolation(): UnityEngine.RigidbodyInterpolation;
		public set interpolation(): UnityEngine.RigidbodyInterpolation;
		public get rotation(): UnityEngine.Quaternion;
		public set rotation(): UnityEngine.Quaternion;
		public get position(): UnityEngine.Vector3;
		public set position(): UnityEngine.Vector3;
		public get detectCollisions(): boolean;
		public set detectCollisions(): boolean;
		public get inertiaTensor(): UnityEngine.Vector3;
		public set inertiaTensor(): UnityEngine.Vector3;
		public get inertiaTensorRotation(): UnityEngine.Quaternion;
		public set inertiaTensorRotation(): UnityEngine.Quaternion;
		public get worldCenterOfMass(): UnityEngine.Vector3;
		public get maxAngularVelocity(): number;
		public set maxAngularVelocity(): number;
		public get centerOfMass(): UnityEngine.Vector3;
		public set centerOfMass(): UnityEngine.Vector3;
		public get constraints(): UnityEngine.RigidbodyConstraints;
		public set constraints(): UnityEngine.RigidbodyConstraints;
		public get freezeRotation(): boolean;
		public set freezeRotation(): boolean;
		public get isKinematic(): boolean;
		public set isKinematic(): boolean;
		public get maxDepenetrationVelocity(): number;
		public set maxDepenetrationVelocity(): number;
		public get useGravity(): boolean;
		public set useGravity(): boolean;
		public get mass(): number;
		public set mass(): number;
		public get angularDrag(): number;
		public set angularDrag(): number;
		public get drag(): number;
		public set drag(): number;
		public get angularVelocity(): UnityEngine.Vector3;
		public set angularVelocity(): UnityEngine.Vector3;
		public get collisionDetectionMode(): UnityEngine.CollisionDetectionMode;
		public set collisionDetectionMode(): UnityEngine.CollisionDetectionMode;
		public get solverVelocityIterations(): number;
		public set solverVelocityIterations(): number;
	}
}
