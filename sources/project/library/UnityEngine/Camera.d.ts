declare namespace UnityEngine
{
	export namespace Camera
	{
		export function FocalLengthToFOV(focalLength: number, sensorSize: number): number;
		export function FOVToFocalLength(fov: number, sensorSize: number): number;
		export function GetAllCameras(cameras: UnityEngine.Camera[]): number;
		export function SetupCurrent(cur: UnityEngine.Camera): void;
	}
	export class Camera extends UnityEngine.Behaviour
	{
		public constructor();
		static public get main(): UnityEngine.Camera;
		static public get current(): UnityEngine.Camera;
		static public get allCamerasCount(): number;
		static public get allCameras(): UnityEngine.Camera[];
		public AddCommandBuffer(evt: UnityEngine.Rendering.CameraEvent, buffer: UnityEngine.Rendering.CommandBuffer): void;
		public AddCommandBufferAsync(evt: UnityEngine.Rendering.CameraEvent, buffer: UnityEngine.Rendering.CommandBuffer, queueType: UnityEngine.Rendering.ComputeQueueType): void;
		public CalculateFrustumCorners(viewport: UnityEngine.Rect, z: number, eye: UnityEngine.Camera.MonoOrStereoscopicEye, outCorners: UnityEngine.Vector3[]): void;
		public CalculateObliqueMatrix(clipPlane: UnityEngine.Vector4): UnityEngine.Matrix4x4;
		public CopyFrom(other: UnityEngine.Camera): void;
		public CopyStereoDeviceProjectionMatrixToNonJittered(eye: UnityEngine.Camera.StereoscopicEye): void;
		public GetCommandBuffers(evt: UnityEngine.Rendering.CameraEvent): UnityEngine.Rendering.CommandBuffer[];
		public GetStereoNonJitteredProjectionMatrix(eye: UnityEngine.Camera.StereoscopicEye): UnityEngine.Matrix4x4;
		public GetStereoProjectionMatrix(eye: UnityEngine.Camera.StereoscopicEye): UnityEngine.Matrix4x4;
		public GetStereoViewMatrix(eye: UnityEngine.Camera.StereoscopicEye): UnityEngine.Matrix4x4;
		public RemoveAllCommandBuffers(): void;
		public RemoveCommandBuffer(evt: UnityEngine.Rendering.CameraEvent, buffer: UnityEngine.Rendering.CommandBuffer): void;
		public RemoveCommandBuffers(evt: UnityEngine.Rendering.CameraEvent): void;
		public Render(): void;
		public RenderDontRestore(): void;
		public RenderToCubemap(cubemap: UnityEngine.Cubemap): boolean;
		public RenderToCubemap(cubemap: UnityEngine.RenderTexture): boolean;
		public RenderToCubemap(cubemap: UnityEngine.Cubemap, faceMask: number): boolean;
		public RenderToCubemap(cubemap: UnityEngine.RenderTexture, faceMask: number): boolean;
		public RenderToCubemap(cubemap: UnityEngine.RenderTexture, faceMask: number, stereoEye: UnityEngine.Camera.MonoOrStereoscopicEye): boolean;
		public RenderWithShader(shader: UnityEngine.Shader, replacementTag: string): void;
		public Reset(): void;
		public ResetAspect(): void;
		public ResetCullingMatrix(): void;
		public ResetProjectionMatrix(): void;
		public ResetReplacementShader(): void;
		public ResetStereoProjectionMatrices(): void;
		public ResetStereoViewMatrices(): void;
		public ResetTransparencySortSettings(): void;
		public ResetWorldToCameraMatrix(): void;
		public ScreenPointToRay(pos: UnityEngine.Vector3): UnityEngine.Ray;
		public ScreenPointToRay(pos: UnityEngine.Vector3, eye: UnityEngine.Camera.MonoOrStereoscopicEye): UnityEngine.Ray;
		public ScreenToViewportPoint(position: UnityEngine.Vector3): UnityEngine.Vector3;
		public ScreenToWorldPoint(position: UnityEngine.Vector3): UnityEngine.Vector3;
		public ScreenToWorldPoint(position: UnityEngine.Vector3, eye: UnityEngine.Camera.MonoOrStereoscopicEye): UnityEngine.Vector3;
		public SetReplacementShader(shader: UnityEngine.Shader, replacementTag: string): void;
		public SetStereoProjectionMatrix(eye: UnityEngine.Camera.StereoscopicEye, matrix: UnityEngine.Matrix4x4): void;
		public SetStereoViewMatrix(eye: UnityEngine.Camera.StereoscopicEye, matrix: UnityEngine.Matrix4x4): void;
		public SetTargetBuffers(colorBuffer: UnityEngine.RenderBuffer, depthBuffer: UnityEngine.RenderBuffer): void;
		public SetTargetBuffers(colorBuffer: UnityEngine.RenderBuffer[], depthBuffer: UnityEngine.RenderBuffer): void;
		public ViewportPointToRay(pos: UnityEngine.Vector3): UnityEngine.Ray;
		public ViewportPointToRay(pos: UnityEngine.Vector3, eye: UnityEngine.Camera.MonoOrStereoscopicEye): UnityEngine.Ray;
		public ViewportToScreenPoint(position: UnityEngine.Vector3): UnityEngine.Vector3;
		public ViewportToWorldPoint(position: UnityEngine.Vector3): UnityEngine.Vector3;
		public ViewportToWorldPoint(position: UnityEngine.Vector3, eye: UnityEngine.Camera.MonoOrStereoscopicEye): UnityEngine.Vector3;
		public WorldToScreenPoint(position: UnityEngine.Vector3): UnityEngine.Vector3;
		public WorldToScreenPoint(position: UnityEngine.Vector3, eye: UnityEngine.Camera.MonoOrStereoscopicEye): UnityEngine.Vector3;
		public WorldToViewportPoint(position: UnityEngine.Vector3): UnityEngine.Vector3;
		public WorldToViewportPoint(position: UnityEngine.Vector3, eye: UnityEngine.Camera.MonoOrStereoscopicEye): UnityEngine.Vector3;
		public get nearClipPlane(): number;
		public set nearClipPlane(): number;
		public get sensorSize(): UnityEngine.Vector2;
		public set sensorSize(): UnityEngine.Vector2;
		public get lensShift(): UnityEngine.Vector2;
		public set lensShift(): UnityEngine.Vector2;
		public get focalLength(): number;
		public set focalLength(): number;
		public get rect(): UnityEngine.Rect;
		public set rect(): UnityEngine.Rect;
		public get pixelRect(): UnityEngine.Rect;
		public set pixelRect(): UnityEngine.Rect;
		public get pixelWidth(): number;
		public get pixelHeight(): number;
		public get scaledPixelWidth(): number;
		public get scaledPixelHeight(): number;
		public get targetTexture(): UnityEngine.RenderTexture;
		public set targetTexture(): UnityEngine.RenderTexture;
		public get activeTexture(): UnityEngine.RenderTexture;
		public get targetDisplay(): number;
		public set targetDisplay(): number;
		public get cameraToWorldMatrix(): UnityEngine.Matrix4x4;
		public get worldToCameraMatrix(): UnityEngine.Matrix4x4;
		public set worldToCameraMatrix(): UnityEngine.Matrix4x4;
		public get projectionMatrix(): UnityEngine.Matrix4x4;
		public set projectionMatrix(): UnityEngine.Matrix4x4;
		public get nonJitteredProjectionMatrix(): UnityEngine.Matrix4x4;
		public set nonJitteredProjectionMatrix(): UnityEngine.Matrix4x4;
		public get useJitteredProjectionMatrixForTransparentRendering(): boolean;
		public set useJitteredProjectionMatrixForTransparentRendering(): boolean;
		public get previousViewProjectionMatrix(): UnityEngine.Matrix4x4;
		public get scene(): UnityEngine.SceneManagement.Scene;
		public set scene(): UnityEngine.SceneManagement.Scene;
		public get stereoEnabled(): boolean;
		public get stereoSeparation(): number;
		public set stereoSeparation(): number;
		public get stereoConvergence(): number;
		public set stereoConvergence(): number;
		public get areVRStereoViewMatricesWithinSingleCullTolerance(): boolean;
		public get usePhysicalProperties(): boolean;
		public set usePhysicalProperties(): boolean;
		public get clearStencilAfterLightingPass(): boolean;
		public set clearStencilAfterLightingPass(): boolean;
		public get depthTextureMode(): UnityEngine.DepthTextureMode;
		public set depthTextureMode(): UnityEngine.DepthTextureMode;
		public get clearFlags(): UnityEngine.CameraClearFlags;
		public set clearFlags(): UnityEngine.CameraClearFlags;
		public get farClipPlane(): number;
		public set farClipPlane(): number;
		public get fieldOfView(): number;
		public set fieldOfView(): number;
		public get renderingPath(): UnityEngine.RenderingPath;
		public set renderingPath(): UnityEngine.RenderingPath;
		public get actualRenderingPath(): UnityEngine.RenderingPath;
		public get allowHDR(): boolean;
		public set allowHDR(): boolean;
		public get allowMSAA(): boolean;
		public set allowMSAA(): boolean;
		public get allowDynamicResolution(): boolean;
		public set allowDynamicResolution(): boolean;
		public get forceIntoRenderTexture(): boolean;
		public set forceIntoRenderTexture(): boolean;
		public get orthographicSize(): number;
		public set orthographicSize(): number;
		public get orthographic(): boolean;
		public set orthographic(): boolean;
		public get opaqueSortMode(): UnityEngine.Rendering.OpaqueSortMode;
		public set opaqueSortMode(): UnityEngine.Rendering.OpaqueSortMode;
		public get stereoTargetEye(): UnityEngine.StereoTargetEyeMask;
		public set stereoTargetEye(): UnityEngine.StereoTargetEyeMask;
		public get transparencySortMode(): UnityEngine.TransparencySortMode;
		public set transparencySortMode(): UnityEngine.TransparencySortMode;
		public get depth(): number;
		public set depth(): number;
		public get aspect(): number;
		public set aspect(): number;
		public get velocity(): UnityEngine.Vector3;
		public get cullingMask(): number;
		public set cullingMask(): number;
		public get eventMask(): number;
		public set eventMask(): number;
		public get layerCullSpherical(): boolean;
		public set layerCullSpherical(): boolean;
		public get cameraType(): UnityEngine.CameraType;
		public set cameraType(): UnityEngine.CameraType;
		public get layerCullDistances(): number[];
		public set layerCullDistances(): number[];
		public get useOcclusionCulling(): boolean;
		public set useOcclusionCulling(): boolean;
		public get cullingMatrix(): UnityEngine.Matrix4x4;
		public set cullingMatrix(): UnityEngine.Matrix4x4;
		public get backgroundColor(): UnityEngine.Color;
		public set backgroundColor(): UnityEngine.Color;
		public get transparencySortAxis(): UnityEngine.Vector3;
		public set transparencySortAxis(): UnityEngine.Vector3;
		public get commandBufferCount(): number;
	}
}
